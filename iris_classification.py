import pandas as pd  # Импорт библиотеки pandas для работы с данными в формате таблицы
from sklearn.model_selection import train_test_split, GridSearchCV  # Импорт функций для разделения данных на обучающий и тестовый наборы, а также для поиска оптимальных параметров модели
from sklearn import svm  # Импорт модуля для машинного обучения методом опорных векторов (SVM)

path = "/content/gdrive/My Drive/Home_works/iris.csv"  # Задание пути к файлу с данными
data = pd.read_csv(path)  # Загрузка данных из файла в формате CSV с помощью библиотеки pandas

params = data.drop("name", axis=1).corr().columns  # Определение параметров для обучения модели путем исключения столбца "name" и вычисления корреляции между признаками

x_train, x_test, y_train, y_test = train_test_split(data[params], data['name'], test_size=0.2, random_state=0)  # Разделение данных на обучающий и тестовый наборы в соотношении 80/20 с фиксированным начальным состоянием генератора случайных чисел

gamma = [0.001, 0.01, 0.005, 0.02]  # Задание значений параметра gamma для модели
C = [1, 10, 50, 100, 200, 500, 1000]  # Задание значений параметра C для модели
parameters1 = {"gamma":gamma, "C":C}  # Создание словаря с параметрами для поиска оптимальных значений

model = svm.SVC(**parameters1)  # Инициализация модели с использованием определенных параметров
grid = GridSearchCV(model, parameters1, cv=4)  # Создание объекта для поиска оптимальных параметров с использованием кросс-валидации
grid.fit(x_train, y_train)  # Обучение модели на обучающем наборе данных

pred = grid.predict(x_test)  # Получение предсказанных значений на тестовом наборе данных

print(list(pred) == y_test)  # Вывод результата сравнения предсказанных значений с фактическими значениями

accuracy = (sum(pred == y_test) / len(y_test)) * 100  # Вычисление точности предсказаний в процентах
print(f"Accuracy: {accuracy:.2f}%")  # Вывод точности предсказаний с двумя знаками после запятой
